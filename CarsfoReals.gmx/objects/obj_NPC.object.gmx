<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Car</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>obj_Car_Base</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize NPC
event_inherited();
my_target = instance_create(x, y, obj_NPC_Target);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NPC AI
//Pretty spot on but would like to add brakes and corrections
//if in head on collision stalemate

event_inherited();

pth_distance = point_distance(x, y, my_target.x, my_target.y);

if(pth_distance &gt; 300){
    if(my_target.path_speed &gt; -2){my_target.path_speed -= 0.5;}
}else if(pth_distance &lt; 300){
    if(my_target.path_speed &lt; 15){my_target.path_speed += 2;}
}

//if(phy_speed &lt; 1){
//    my_target.path_speed = 10;
//}else{
//   if(pth_distance &gt; phy_speed  * 15){
//        if(my_target.path_speed &gt; 0){
//            my_target.path_speed = phy_speed - 2.5;
//        }
//    }else if(pth_distance &lt; (phy_speed * 15) + 1){
//        my_target.path_speed = phy_speed + 1;
//    }
//}

t_dir = point_direction(x, y, my_target.x, my_target.y);
t_xd = lengthdir_x(2200, t_dir);
t_yd = lengthdir_y(2200, t_dir);

physics_apply_force(x, y, t_xd, t_yd);
phy_rotation = -t_dir - 270;

inertia_dir = point_direction(x, y, x + phy_speed_x, y + phy_speed_y);
forward_dir = point_direction(x, y, x + lengthdir_x(50, -phy_rotation- 270), y + lengthdir_y(50, -phy_rotation- 270));
 
diff_angle = abs(angle_difference(forward_dir, inertia_dir));

if(diff_angle &gt; 55){     //Heavy NPC Drifting Initialized (Simulating Brakes)
    phy_linear_damping = 3.3;
}else{
    phy_linear_damping = 0.08;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.300000011920929</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.0799999982118607</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>5</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.5</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>68,0</point>
    <point>68,128</point>
    <point>0,128</point>
  </PhysicsShapePoints>
</object>
