<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Car</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Car Setup
randomize();

image_index = irandom(15);
image_speed = 0;
phy_rotation = -270;

my_target = -1;
race_position = 1;

car_speed = 0;
diff_angle = 0;
inertia_dir = 0;
forward_dir = 0;
forward_x = 0;
forward_y = 0;
turn_weight = 0;
pth_distance = 0;
t_dir = 0;
accel_reverse = 0;
control_path_distance = 0;
control_path_end = 0;
player_inst = -4;
inst_check_id = 0;

// Race Control Path Vars
lap = 1;
current_node = 0;
checkpoint_collision = 0;
current_path = path_Race_Control;
current_distance = 0;
max_path_points = path_get_number(current_path) + 1;

for(i = 0; i &lt; max_path_points; i++){
    node_array[i, 0] = path_get_point_x(current_path, i);  //nodearray[path, x(0) or y(1)] holds the x and y coordinates
    node_array[i, 1] = path_get_point_y(current_path, i);  //of the points on path_Race_Control
}

//Setup Position Grid
//rce_grid = ds_grid_create(3, 4);
//player_id = instance_find(obj_Player, 0);
//current_distance = distance_to_point(node_array[current_node, 0], node_array[current_node, 1]);
//var i;

//for (i = 0; i &lt; instance_number(obj_NPC); i += 1){
//   NPC_id[i] = instance_find(obj_NPC,i);
//}

//for(xp = 0; xp &lt; 3; xp++){
//    for(yp = 0; yp &lt; 4; yp++){           
//        if(xp = 0){
//            ds_grid_add(rce_grid, xp, yp, "Player " + string(yp + 1));
//       }else if(xp = 1 &amp;&amp; yp &lt; 3){
//            ds_grid_add(rce_grid, xp, yp, NPC_id[yp]);
//        }else if(xp = 1 &amp;&amp; yp = 3){
//            ds_grid_add(rce_grid, xp, yp, player_id);
//        }else if(xp = 2){
//            ds_grid_add(rce_grid, xp, yp, current_distance);
//        }
//    }
//}

//Initialize Particle System
psys = part_system_create();
part_system_automatic_draw(psys, false);
part_system_position(psys, 0, 0);
part_system_depth(psys, 1);

emm = part_emitter_create(psys);

//TireTrack Particle
tire_part = part_type_create();
part_type_sprite(tire_part, spr_Tiretracks, false, false, false);
part_type_life(tire_part, 10, 200);
part_type_alpha2(tire_part, 0.1, 0);

//Smoke Particle
smoke_part = part_type_create();
part_type_sprite(smoke_part, spr_Smoke, true, false, true);
part_type_life(smoke_part, 10, 50);
part_type_alpha2(smoke_part, 1, 0);
part_type_orientation(smoke_part, 0, 359, 1, 1, 0);

//Dirt Particle
dirt_part = part_type_create();
part_type_life(dirt_part, 10, 50);
part_type_scale(dirt_part, 1, 4);
part_type_size(dirt_part,0.5,1,-.01,0);
part_type_color2(dirt_part,$142CDF,$0A166F);
part_type_alpha2(dirt_part,1,0.2);

//Spark Particle
spark_part = part_type_create();
part_type_life(spark_part, 10, 20);
part_type_shape(spark_part, pt_shape_spark);
part_type_size(spark_part, 0.1, 0.3, 0.01, 0.5);
part_type_colour2(spark_part, 16777215, 12632256);
part_type_alpha2(spark_part, 1, 0);
part_type_speed(spark_part, 1, 2, 0.5, 0);
part_type_direction(spark_part, 0, 359, 0.5, 0);
part_type_orientation(spark_part, 0, 359, 0, 0, 1);
part_type_blend(spark_part, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Destroy the grid and hack the planet Dade0cool

ds_grid_destroy(race_grid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particle Systems
if(phy_speed &gt; 1){
   part_emitter_region(psys, emm, x - 1, x + 1, y - 1, y + 1, ps_shape_rectangle, ps_distr_gaussian);
   inertia_dir = point_direction(x, y, x + phy_speed_x, y + phy_speed_y);
   forward_dir = point_direction(x, y, x + lengthdir_x(50, -phy_rotation- 270), y + lengthdir_y(50, -phy_rotation- 270));
    
   diff_angle = abs(angle_difference(forward_dir, inertia_dir));
   
    if(diff_angle &gt; 30){     //Drifting Initialized        
        if(place_meeting(x, y, obj_Grass)){
        //Ridin Dirtyyy
            phy_linear_damping = 3;

            if(gamepad_button_value(0, gp_shoulderrb) &gt; 0.1){
                part_type_speed(dirt_part, 10, 15, 0, 0);
                part_type_direction(dirt_part, -phy_rotation - 150, -phy_rotation - 30, 0, 0);
                part_type_orientation(dirt_part, -phy_rotation, -phy_rotation, 0, 0, 0);
                part_emitter_region(psys, emm, x - 45, x + 45, y - 45, y + 45, ps_shape_rectangle, ps_distr_gaussian);
                part_emitter_burst(psys, emm, dirt_part, 10);
            }            
        }else if(place_meeting(x, y, obj_Grass) = 0){
        //Smoke Wheels Every Day
            phy_linear_damping = 1.2;
            part_system_depth(psys, 10);
            part_type_size(smoke_part,0.25,0.75,-0.005,0.40);
            part_type_speed(smoke_part, 3, 6, 0, 0);
            part_type_direction(smoke_part, inertia_dir, inertia_dir, 0, 0);
            part_emitter_region(psys, emm, x - 45, x + 45, y - 45, y + 45, ps_shape_rectangle, ps_distr_gaussian);
            part_emitter_burst(psys, emm, smoke_part, 1);
        }
        
        //Emit tire tracks on road
        part_emitter_region(psys, emm, x - 1, x + 1, y - 1, y + 1, ps_shape_rectangle, ps_distr_gaussian);
        part_system_depth(psys, 0);
        part_type_orientation(tire_part, -phy_rotation, -phy_rotation, 0, 0, 0);
        part_emitter_burst(psys, emm, tire_part, 10);
    }else{
        if(place_meeting(x, y, obj_Grass)){
        //Ridin Dirtyyy
            phy_linear_damping = 3;
            
            if(gamepad_button_value(0, gp_shoulderrb) &gt; 0.1){
                part_type_speed(dirt_part, 10, 15, 0, 0);
                part_type_direction(dirt_part, -phy_rotation - 90, -phy_rotation - 90, 0, 0);
                part_type_orientation(dirt_part, -phy_rotation, -phy_rotation, 0, 0, 0);
                part_emitter_region(psys, emm, x - 45, x + 45, y - 45, y + 45, ps_shape_rectangle, ps_distr_gaussian);
                part_emitter_burst(psys, emm, dirt_part, 10);
            }
        }else{
            phy_linear_damping = 0.08;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lap Stats
if(current_node = max_path_points - 1){
    current_node = 1;
    lap += 1;
}

current_distance = distance_to_point(node_array[current_node, 0], node_array[current_node, 1]);

if(current_distance &lt; 320 &amp;&amp; checkpoint_collision = 0){
    current_node += 1;
    checkpoint_collision = 1;
}else if(current_distance &gt; 400 &amp;&amp; checkpoint_collision = 1){
    checkpoint_collision = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Car_Base">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Making sure collisions happen

//Spark Particle
//Supposed to check 4 corners of car and emit sparks from the colliding corner
//Pretty sure its not accounting for the rotation of the car when setting the 
//emitter region

if(collision_point(x -35, y - 88, obj_Car_Base, false, false)){
    part_emitter_region(psys, emm, x - 50, x - 20, y - 100, y - 76, ps_shape_ellipse, ps_distr_gaussian);
    part_emitter_burst(psys, emm, spark_part, 5);   
}else if(collision_point(x + 36, y - 88, obj_Car_Base, false, false)){
    part_emitter_region(psys, emm, x + 20, x + 50, y - 100, y - 76, ps_shape_ellipse, ps_distr_gaussian);
    part_emitter_burst(psys, emm, spark_part, 5);   
}else if(collision_point(x + 36, y + 43, obj_Car_Base, false, false)){
    part_emitter_region(psys, emm, x + 20, x + 50, y + 30, y + 54, ps_shape_ellipse, ps_distr_gaussian);
    part_emitter_burst(psys, emm, spark_part, 5);
}else if(collision_point(x - 35, y + 43, obj_Car_Base, false, false)){
    part_emitter_region(psys, emm, x - 50, x - 20, y + 30, y + 54, ps_shape_ellipse, ps_distr_gaussian);
    part_emitter_burst(psys, emm, spark_part, 5);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_system_drawit(psys);
draw_self();
/*
draw_text(view_xview, view_yview, "FPS: " + string(fps));

if(instance_exists(player_inst)){
    draw_text(view_xview, view_yview + 15, "Lap: " + string(player_inst.lap));
    draw_text(view_xview, view_yview + 30, "Next Point: " + string(node_array[player_inst.current_node, 0])+ ", " + string(node_array[player_inst.current_node, 1]));
    draw_text(view_xview, view_yview + 45, "Current Node: " + string(player_inst.current_node));
    draw_text(view_xview, view_yview + 60, "Max Nodes: " + string(player_inst.max_path_points));
    draw_text(view_xview, view_yview + 75, "Instance ID: " + string(player_inst));
    draw_text(view_xview, view_yview + 90, "Position: " + string(player_inst.race_position));
    draw_text(view_xview, view_yview + 105, "Instance Check ID: " + string(inst_check_id));
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.0799999982118607</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>-1,-1</point>
    <point>71,-1</point>
    <point>71,131</point>
    <point>-1,131</point>
  </PhysicsShapePoints>
</object>
